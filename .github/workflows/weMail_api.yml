name: API Automation Tests

on:
    workflow_dispatch:
    # schedule:
    #   - cron: "0 3 * * *"
    # At the 09:00 AM of every day in BD and 03:00 AM in UTC
    push:
        branches: [main, master, refactored_suite]

env:
    CI: true

    STAGING: ${{ secrets.STAGING }}

    USER_NAME: ${{ secrets.USER_NAME }}
    PASSWORD: ${{ secrets.PASSWORD }}
    WP_SITE_ID: ${{ secrets.WP_SITE_ID }}
    WP_SITE_URL: ${{ secrets.WP_SITE_URL }}
    WP_SITE_USER_NAME: ${{ secrets.WP_SITE_USER_NAME }}
    WP_SITE_USER_PASSWORD: ${{ secrets.WP_SITE_USER_PASSWORD }}
    wcom_Consumer_key: ${{ secrets.WCOM_CONSUMER_KEY }}
    wcom_Consumer_secret: ${{ secrets.WCOM_CONSUMER_SECRET }}
    affiliate_wp_public_key: ${{ secrets.AFFILIATE_WP_PUBLIC_KEY }}
    affiliate_wp_token: ${{ secrets.AFFILIATE_WP_TOKEN }}

    STAGING_USER_NAME: ${{ secrets.STAGING_USER_NAME }}
    STAGING_PASSWORD: ${{ secrets.STAGING_PASSWORD }}
    STAGING_WP_SITE_ID: ${{ secrets.STAGING_WP_SITE_ID }}
    STAGING_WP_SITE_URL: ${{ secrets.STAGING_WP_SITE_URL }}
    STAGING_WP_SITE_USER_NAME: ${{ secrets.STAGING_WP_SITE_USER_NAME }}
    STAGING_WP_SITE_USER_PASSWORD: ${{ secrets.STAGING_WP_SITE_USER_PASSWORD }}
    STAGING_wcom_Consumer_key: ${{ secrets.STAGING_WCOM_CONSUMER_KEY }}
    STAGING_wcom_Consumer_secret: ${{ secrets.STAGING_WCOM_CONSUMER_SECRET }}
    STAGING_affiliate_wp_public_key: ${{ secrets.STAGING_AFFILIATE_WP_PUBLIC_KEY }}
    STAGING_affiliate_wp_token: ${{ secrets.STAGING_AFFILIATE_WP_TOKEN }}

jobs:
    production_test:
        if: github.ref_name == 'master'
        timeout-minutes: 60
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install dependencies
              # working-directory: ./tests/api_automation
              run: |
                  npm ci
                  npm install allure-commandline
                  npx playwright install firefox

            - name: Run Playwright tests on Production
              # working-directory: ./tests/api_automation
              run: STAGING=0 npx playwright test

            - name: Get Allure history
              uses: actions/checkout@v3
              if: always()
              continue-on-error: true
              with:
                  ref: gh-pages
                  path: gh-pages

            - name: Allure Report action
              uses: simple-elf/allure-report-action@master
              if: always()
              id: allure-report
              with:
                  allure_results: allure-results
                  # allure_results: ./tests/api_automation/allure-results
                  gh_pages: gh-pages
                  allure_report: allure-report
                  # allure_report: ./tests/api_automation/allure-report
                  allure_history: allure-history

            - name: Deploy report to Github Pages
              if: always()
              uses: peaceiris/actions-gh-pages@v2
              env:
                  PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
                  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PUBLISH_BRANCH: gh-pages
                  PUBLISH_DIR: allure-history

            - name: Allure Report Link
              if: always()
              run: echo https://chooton838.github.io/weMail_API/${{ github.run_number }}

            - name: Publish Test Report
              uses: mikepenz/action-junit-report@v3
              if: always() # always run even if the previous step fails
              with:
                  report_paths: "playwright-report/results.xml"
                  # report_paths: "./tests/api_automation/playwright-report/results.xml"
                  include_passed: true,
                  check_retries: true,
                  detailed_summary: true,

            - name: Archive playwright artifacts (HTML Report)
              uses: actions/upload-artifact@v3
              if: always()
              with:
                  name: playwright-report
                  path: playwright-report/
                  # path: ./tests/api_automation/playwright-report/
                  if-no-files-found: ignore
                  retention-days: 30

            # - name: Send Test Report on email
            #   if: failure()
            #   uses: dawidd6/action-send-mail@v3
            #   with:
            #     # mail server settings
            #     server_address: smtp.gmail.com
            #     server_port: 465
            #     # user credentials
            #     username: ${{ secrets.EMAIL_USERNAME }}
            #     password: ${{ secrets.EMAIL_PASSWORD }}
            #     # email subject
            #     subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
            #     # email body as text
            #     body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}. This test is conducted on Appsero Production server. The attached index.html file will give the details report. And Allure Report Link ~ https://chooton838.github.io/Appsero-api/${{ github.run_number }}
            #     # comma-separated string, send email to
            #     to: choton838@gmail.com
            #     # from email name
            #     from: Appsero API Automation Test - Production
            #     attachments: ./playwright-report/index.html
            #     # attachments: ./tests/api_automation/playwright-report/index.html

    staging_test:
        if: github.ref_name == 'refactored_suite'
        timeout-minutes: 60
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Install dependencies
              # working-directory: ./tests/api_automation
              run: |
                  npm ci
                  npm install allure-commandline
                  npx playwright install firefox

            - name: Run Playwright tests on Staging
              # working-directory: ./tests/api_automation
              run: |
                  STAGING=1 npx playwright test

            - name: Get Allure history
              uses: actions/checkout@v3
              if: always()
              continue-on-error: true
              with:
                  ref: gh-pages
                  path: gh-pages

            - name: Allure Report action
              uses: simple-elf/allure-report-action@master
              if: always()
              id: allure-report
              with:
                  allure_results: allure-results
                  # allure_results: ./tests/api_automation/allure-results
                  gh_pages: gh-pages
                  allure_report: allure-report
                  # allure_report: ./tests/api_automation/allure-report
                  allure_history: allure-history

            - name: Deploy report to Github Pages
              if: always()
              uses: peaceiris/actions-gh-pages@v2
              env:
                  PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
                  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PUBLISH_BRANCH: gh-pages
                  PUBLISH_DIR: allure-history

            - name: Allure Report Link
              if: always()
              run: echo https://chooton838.github.io/weMail_API/${{ github.run_number }}

            - name: Publish Test Report
              uses: mikepenz/action-junit-report@v3
              if: always() # always run even if the previous step fails
              with:
                  report_paths: "playwright-report/results.xml"
                  # report_paths: "./tests/api_automation/playwright-report/results.xml"
                  include_passed: true,
                  check_retries: true,
                  detailed_summary: true,

            - name: Archive playwright artifacts (HTML Report)
              uses: actions/upload-artifact@v3
              if: always()
              with:
                  name: playwright-report
                  path: playwright-report/
                  # path: ./tests/api_automation/playwright-report/
                  if-no-files-found: ignore
                  retention-days: 30

            - name: Publish to slack channel via bot token
              id: slack
              uses: slackapi/slack-github-action@v1.24.0
              with:
                channel-id: 'SLACK_CHANNEL_ID' # ID of Slack Channel you want to post to
                slack-message: 'posting from a github action!' # The message you want to post
              env:
                SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

    notify-on-failure:
        runs-on: ubuntu-latest
        needs: staging_test
        if: always()

        steps:
            - name: Send Slack Notification on Failure
              uses: rtCamp/action-slack-notify@v2
              with:
                  status: "Failed"
                  author_name: "GitHub Actions"
                  title: "Job Failed"
                  text: "Playwright tests failed. Please check the GitHub Actions logs. ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}."
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

              # - name: Send Test Report on email
              #   if: failure()
              #   uses: dawidd6/action-send-mail@v3
              #   with:
              #     # mail server settings
              #     server_address: smtp.gmail.com
              #     server_port: 465
              #     # user credentials
              #     username: ${{ secrets.EMAIL_USERNAME }}
              #     password: ${{ secrets.EMAIL_PASSWORD }}
              #     # email subject
              #     subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
              #     # email body as text
              #     body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}. This test is conducted on Appsero Production server. The attached index.html file will give the details report. And Allure Report Link ~ https://chooton838.github.io/Appsero-api/${{ github.run_number }}
              #     # comma-separated string, send email to
              #     to: choton838@gmail.com
              #     # from email name
              #     from: Appsero API Automation Test - Production
              #     attachments: ./playwright-report/index.html
              #     # attachments: ./tests/api_automation/playwright-report/index.html
